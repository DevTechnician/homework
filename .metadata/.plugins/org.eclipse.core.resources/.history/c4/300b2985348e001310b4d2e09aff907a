package com.uw.homework252eichmj;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class DataBaseUtility {

	public static final String TABLE_NAME = "tasks";
	public static final String COLUMN_ID = "_id";
	public static final String COLUMN_TASK = "task";
	public static final String COLUMN_TASK_DESCRIPTION = "task_description";

	private static final String DATABASE_NAME = "Task_List";
	private static final int DATABASE_VERSION = 1;

	private static final String DATABASE_CREATE = "create table " + TABLE_NAME
			+ " ("
			+ COLUMN_ID + " integer primary key, "
			+ COLUMN_TASK + " text not null, "
			+ COLUMN_TASK_DESCRIPTION + " text not null"
			+" )";

	private final Context mContext;
	private DatabaseHelper mDatabaseHelper;
	
	public SQLiteDatabase mDatabase;

	public DataBaseUtility(Context context) {
		this.mContext = context;
		//context.deleteDatabase(DATABASE_NAME);
		mDatabaseHelper = new DatabaseHelper(mContext);
		mDatabase = mDatabaseHelper.getWritableDatabase();
		
	}
	
	//SQLiteDatabase mDatabase = mDatabaseHelper.getWritableDatabase();
	
	public long insertNewRow(String task, String description){
		ContentValues newTask = new ContentValues();
		newTask.put(COLUMN_TASK, task);
		newTask.put(COLUMN_TASK_DESCRIPTION, description);
		return mDatabase.insert(TABLE_NAME, null, newTask);
	}
	
	public boolean deleteTask(long rowID) {
		return mDatabase.delete(TABLE_NAME,
				COLUMN_ID + " = " + rowID,
				null) > 0;
		
	}
	
	public Cursor getAllTasks(){
		
		return mDatabase.query(TABLE_NAME,
				new String[]{COLUMN_ID, COLUMN_TASK, COLUMN_TASK_DESCRIPTION},
				null, null, null, null, null);
		
	}
	
	public Cursor getTask(long rowId){
		Cursor mCursor =
				mDatabase.query(TABLE_NAME,
						new String[]{COLUMN_ID, COLUMN_TASK, COLUMN_TASK_DESCRIPTION}, 
						COLUMN_ID + " = " + rowId,
						null, null, null, null);
		
		if (mCursor != null) {
            mCursor.moveToFirst();
        }
        return mCursor;
		
	}
	
	public boolean editTask(long rowId,String task, String description){
		ContentValues mValues = new ContentValues();
		mValues.put(COLUMN_TASK, task);
		mValues.put(COLUMN_TASK_DESCRIPTION, description);
		
		return mDatabase.update(TABLE_NAME, mValues, COLUMN_ID + " = " + rowId,
				null) > 0;
		
	}
	

	/////////////////
	public class DatabaseHelper extends SQLiteOpenHelper {

		public DatabaseHelper(Context context) {

			super(context, DATABASE_NAME, null, DATABASE_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			// TODO Auto-generated method stub
			db.execSQL(DATABASE_CREATE);

		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			// TODO Auto-generated method stub
			onUpgrade(db, oldVersion, newVersion);
		}

	}
	// //////////////////

}
